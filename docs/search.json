[{"path":"/articles/DTSEA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DTSEA User Guide","text":"Drug Target Set Enrichment Analysis (DTSEA) novel tool used identify effective drug set particular disease based Gene Set Enrichment Analysis (GSEA). central hypothesis DTSEA targets potential candidates specific disease (e.g., COVID-19) close , least far away disease. DTSEA algorithm determines whether drug potent chosen disease proximity drug targets disease-related genes. central hypothesis DTSEA, DTSEA consists two main parts: Evaluate influence specific disease PPI network random walk restart algorithm. evaluate influence, compute disease-node distance using random walk restart (RwR) algorithm, rank nodes reversely. Evaluate drug-disease associations based GSEA. GSEA approach adopted part identify whether candidate drug targets disease-related (top) disease-unrelated (bottom) human PPI list. specific disease gene list normalized median set zero arbitrary cutoff point classify relations manually. vignette illustrates use DTSEA easily. , using functions package, users identify potential drugs disease DTSEA algorithm.","code":""},{"path":"/articles/DTSEA.html","id":"example-1-calculate-the-enrichment-scores-of-drugs-","dir":"Articles","previous_headings":"","what":"Example 1: Calculate the enrichment scores of drugs.","title":"DTSEA User Guide","text":"function DTSEA used calculate enrichment scores drugs. parameters follows: network: human protein-protein interactome network. preconverted inputted DTSEA. disease: disease-related nodes. drugs: drug-target long format dataframe. includes least columns drug_id drug_target. rwr.pt: random walk p0 vector. Set zero wish DTSEA automatically compute , can provide predetermined p0 vector. eps: boundary calculating p value. nPermSimple: Number permutations simple fgsea implementation preliminary estimation p-values. gseaParam: GSEA parameter value, gene-level statistics raised power ‘gseaParam’ calculating GSEA enrichment scores. verbose: Show messages. can arrange positive results NES can draw enrichment plot first predicted drug using fgsea package.","code":"# Load the data data(\"example_disease_list\", package = \"DTSEA\") data(\"example_drug_target_list\", package = \"DTSEA\") data(\"example_ppi\", package = \"DTSEA\")  # Perform a simple DTSEA analysis using default optional parameters then sort # the result dataframe by normalized enrichment scores (NES) result <- DTSEA(network = example_ppi,                 disease = example_disease_list,                 drugs = example_drug_target_list, verbose = FALSE ) %>%   arrange(desc(NES)) #> Warning in preparePathwaysAndStats(pathways, stats, minSize, maxSize, gseaParam, : There are ties in the preranked stats (0.81% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results. head(result) #> # A tibble: 6 × 8 #>   drug_id    pval   padj log2err    ES   NES  size leadingEdge #>   <chr>     <dbl>  <dbl>   <dbl> <dbl> <dbl> <int> <list>      #> 1 DB00112 0.00489 0.0309  0.407  0.729  1.84     9 <chr [4]>   #> 2 DB09079 0.0969  0.266   0.0928 0.509  1.40    12 <chr [10]>  #> 3 DB11952 0.0671  0.255   0.111  0.890  1.38     2 <chr [2]>   #> 4 DB05017 0.100   0.266   0.0904 0.866  1.35     2 <chr [2]>   #> 5 DB11526 0.161   0.339   0.0701 0.681  1.31     4 <chr [4]>   #> 6 DB01611 0.203   0.350   0.0621 0.719  1.26     3 <chr [3]> select(result, -leadingEdge) %>%   arrange(desc(NES)) %>%   filter(NES > 0 & pval < .05) %>% head() #> # A tibble: 1 × 7 #>   drug_id    pval   padj log2err    ES   NES  size #>   <chr>     <dbl>  <dbl>   <dbl> <dbl> <dbl> <int> #> 1 DB00112 0.00489 0.0309   0.407 0.729  1.84     9 fgsea::plotEnrichment(   pathway = example_drug_target_list %>%     filter(drug_id == slice(result, 1)$drug_id) %>%     pull(gene_target),   stats = random.walk(network = example_ppi,                       p0 = calculate_p0(nodes = example_ppi,                                         disease = example_disease_list)                       ) )"},{"path":"/articles/DTSEA.html","id":"example-2--get-the-influence-of-the-specific-disease-in-the-ppi-network","dir":"Articles","previous_headings":"","what":"Example 2. Get the influence of the specific disease in the PPI network","title":"DTSEA User Guide","text":"function random.walk calculates pt vector. parameters follows: network input graph object. either igraph object edge list matrix / data frame. p0 starting vector time 0. edge_weight Logical indicate whether input graph contains weight information. gamma restart probability used RwR. gamma takes value 0 1, controlling probability node go back starting node. threshold threshold used RwR. threshold indicates stabilization status, stopping criterion RwR. pt.post.processing way scale pt vector. can ‘none’, ‘zscore’, ‘log’. pt.align way normalize output pt vector. can ‘mean’ manually cut - -regulated genes, ‘median’ avoid influence distribution shape, ‘none’ normalization.","code":"# Calculate p0 p0 <- calculate_p0(nodes = example_ppi, disease = example_disease_list)  # Then perform random walk random.walk(network = example_ppi, p0 = p0, verbose = FALSE) %>%   head() #>    MYD88   MAPK14    TRAF1     JAK2      AGT    IRAK2  #> 5.010910 4.994586 4.985955 4.970095 4.964825 4.959323"},{"path":"/articles/DTSEA.html","id":"example-3--calculate-the-consistency-of-the-prediction","dir":"Articles","previous_headings":"","what":"Example 3. Calculate the consistency of the prediction","title":"DTSEA User Guide","text":"function cronbach.alpha kendall.w used calculate prediction consistency. several prediction results, can use either function describe consistency.","code":"# Just report the results kendall.w(data)$report #> [1] \"Kendall's coefficient W = 0.752, p = 0.0897\"  # Or just report the alpha cronbach.alpha(data) #> [1] 0.7232358"},{"path":"/articles/DTSEA.html","id":"multicore-capability","dir":"Articles","previous_headings":"","what":"Multicore capability","title":"DTSEA User Guide","text":"can enable multicore feature utilize multicore advantages. benchmark.","code":"# set up environment  single.core <- function() {  suppressWarnings(capture.output(DTSEA(network = example_ppi, disease = example_disease_list, drugs = example_drug_target_list, nproc = 0)))   NULL }  dual.core <- function() {  suppressWarnings(capture.output(DTSEA(network = example_ppi, disease = example_disease_list, drugs = example_drug_target_list, nproc = 10)))   NULL }  system.time(single.core()) - system.time(dual.core())"},{"path":"/articles/DTSEA.html","id":"supplementary-data-files","dir":"Articles","previous_headings":"","what":"Supplementary data files","title":"DTSEA User Guide","text":"package, provide example data, small set data demonstrate usage main idea behind DTSEA. provide extra data files, real data used DTSEA paper. supplementary package now GitHub. Anyone can obtain package : list supplementary datasets","code":"if (!\"devtools\" %in% as.data.frame(installed.packages())$Package)   install.packages(\"devtools\") devtools::install_github(\"hanjunwei-lab/DTSEAdata\")"},{"path":"/articles/DTSEA.html","id":"known-bugs","dir":"Articles","previous_headings":"","what":"Known bugs","title":"DTSEA User Guide","text":"Intel Math Kernel Library (MKL) performs poorly package dealing linear algebra operations. use MKL-based BLAS MKL-based R distribution (like Microsoft R Open), get unexpected zero results certain circumstances. Please install Automatically Tuned Linear Algebra package (libatlas) multi-threaded OpenBlas library order get higher performance reliable results : ","code":"sudo apt install libatlas3-base -y sudo apt install libopenblas-base -y"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Junwei Han. Author, maintainer, copyright holder. Yinchun Su. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Han J, Su Y (2022). DTSEA: Drug Target Set Enrichment Analysis. R package version 0.0.3, https://github.com/hanjunwei-lab/DTSEA.","code":"@Manual{,   title = {DTSEA: Drug Target Set Enrichment Analysis},   author = {Junwei Han and Yinchun Su},   year = {2022},   note = {R package version 0.0.3},   url = {https://github.com/hanjunwei-lab/DTSEA}, }"},{"path":"/index.html","id":"drug-set-enrichment-analysis-dtsea","dir":"","previous_headings":"","what":"Drug Target Set Enrichment Analysis","title":"Drug Target Set Enrichment Analysis","text":"DTSEA contains basic R functions sample data running DTSEA algorithm. installing loading package, users able explore framework DTSEA.","code":""},{"path":"/index.html","id":"more-about-dtsea","dir":"","previous_headings":"","what":"More about DTSEA","title":"Drug Target Set Enrichment Analysis","text":"Drug Target Set Enrichment Analysis (DTSEA) novel tool used identify effective drug set particular disease based Gene Set Enrichment Analysis (GSEA). assumes effective drugs closer affinity specified disease.","code":""},{"path":[]},{"path":"/index.html","id":"step-1-prerequisites-for-installation","dir":"","previous_headings":"Getting started","what":"Step 1. Prerequisites for installation","title":"Drug Target Set Enrichment Analysis","text":"ensure necessary system dependencies configured. Debian-based Linux system (Debian buster bullseye), build-essential installed first: Windows (8.1 / 10 / 11): Rtools installed system path. latest base R recommended. compatibility earlier version (v4.0.x) evaluation.","code":"sudo apt install -y build-essential"},{"path":"/index.html","id":"step-2-install-the-package","dir":"","previous_headings":"Getting started","what":"Step 2. Install the package","title":"Drug Target Set Enrichment Analysis","text":"dependency fgsea BiocParallel unavailable CRAN available BioConductor. need install BiocManager manually. can install development version DTSEA GitHub :","code":"if (!\"BiocManager\" %in% as.data.frame(installed.packages())$Package)   install.packages(\"BiocManager\") BiocManager::install(c(\"fgsea\", \"BiocParallel\")) if (!\"devtools\" %in% as.data.frame(installed.packages())$Package)   install.packages(\"devtools\") devtools::install_github(\"hanjunwei-lab/DTSEA\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"Getting started","what":"Examples","title":"Drug Target Set Enrichment Analysis","text":"basic example shows solve common problem: can enable multicore feature utilize multicore advantages. benchmark.","code":"library(DTSEA)  # Load the data data(example_disease_list) data(example_drug_target_list) data(example_ppi)  # Perform a simple DTSEA analysis  result <- DTSEA(     network = example_ppi,     disease = example_disease_list,     drugs = example_drug_target_list ) # set up environment  single.core <- function() {   suppressWarnings(capture.output(DTSEA(network = example_ppi, disease = example_disease_list, drugs = example_drug_target_list, nproc = 0)))   NULL }  dual.core <- function() {   suppressWarnings(capture.output(DTSEA(network = example_ppi, disease = example_disease_list, drugs = example_drug_target_list, nproc = 10)))   NULL }  single.core() dual.core()"},{"path":"/index.html","id":"supplementary-data-files","dir":"","previous_headings":"Getting started","what":"Supplementary data files","title":"Drug Target Set Enrichment Analysis","text":"package, provide example data, small set data demonstrate usage main idea behind DTSEA. provide extra data files, real data used DTSEA paper. supplementary package now GitHub. Anyone can obtain package : {r echo=FALSE} (!\"devtools\" %% .data.frame(installed.packages())$Package)   install.packages(\"devtools\") devtools::install_github(\"hanjunwei-lab/DTSEAdata\")","code":""},{"path":"/index.html","id":"known-bugs","dir":"","previous_headings":"","what":"Known bugs","title":"Drug Target Set Enrichment Analysis","text":"Intel Math Kernel Library (MKL) performs poorly package dealing linear algebra operations. use MKL-based BLAS MKL-based R distribution (like Microsoft R Open), get unexpected zero results certain circumstances. Please install Automatically Tuned Linear Algebra package (libatlas) multi-threaded OpenBlas library order get higher performance reliable results : ","code":"sudo apt install libatlas3-base -y sudo apt install libopenblas-base -y"},{"path":"/reference/calculate_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate between variance in network — calculate_between","title":"Calculate between variance in network — calculate_between","text":"description","code":""},{"path":"/reference/calculate_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate between variance in network — calculate_between","text":"","code":"calculate_between(graph, set_a, set_b)"},{"path":"/reference/calculate_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate between variance in network — calculate_between","text":"graph input graph object. either igraph object edge list matrix/data frame. set_a first gene set set_b second gene set","code":""},{"path":"/reference/calculate_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate between variance in network — calculate_between","text":"positive number","code":""},{"path":"/reference/calculate_p0.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","title":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","text":"function provides reliable approach generating p0 vector.","code":""},{"path":"/reference/calculate_p0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","text":"","code":"calculate_p0(nodes, disease)"},{"path":"/reference/calculate_p0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","text":"nodes nodes variable can either accept igraph object nodes vector. disease disease variable must specify disease-affected nodes short vector.","code":""},{"path":"/reference/calculate_p0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","text":"resulting p0 vector.","code":""},{"path":"/reference/calculate_p0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate the p0 vector used in Random Walk with Restart\r\n(RwR) — calculate_p0","text":"","code":"library(DTSEA) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Load the data data(\"example_disease_list\", package = \"DTSEA\") data(\"example_drug_target_list\", package = \"DTSEA\") data(\"example_ppi\", package = \"DTSEA\")  # Compute the p0 vector p0 <- calculate_p0(nodes = example_ppi, disease = example_disease_list)  # You can decrease the order of the p0 to get the most affected nodes. p0 <- sort(p0, decreasing = TRUE) %>%   names() %>%   head(10)  # If you have obtained the supplemental data, then you can compute the p0 # in the real data set  # supp_data <- get_data(c(\"graph\", \"disease_related\")) # p0 <- calculate_p0(nodes = supp_data[[\"graph\"]], #                    disease = supp_data[[\"disease_related\"]])"},{"path":"/reference/calculate_within.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate within variance — calculate_within","title":"Calculate within variance — calculate_within","text":"description","code":""},{"path":"/reference/calculate_within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate within variance — calculate_within","text":"","code":"calculate_within(graph, given_set)"},{"path":"/reference/calculate_within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate within variance — calculate_within","text":"graph input graph object. either igraph object edge list matrix / data frame. given_set first gene set","code":""},{"path":"/reference/calculate_within.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate within variance — calculate_within","text":"positive number","code":""},{"path":"/reference/cronbach.alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Cronbach's alpha — cronbach.alpha","title":"Cronbach's alpha — cronbach.alpha","text":"Computes Cronbach's alpha","code":""},{"path":"/reference/cronbach.alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cronbach's alpha — cronbach.alpha","text":"","code":"cronbach.alpha(data)"},{"path":"/reference/cronbach.alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cronbach's alpha — cronbach.alpha","text":"data data frame matrix contains n subjects * m raters.","code":""},{"path":"/reference/cronbach.alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cronbach's alpha — cronbach.alpha","text":"Cronbach's alpha (unstandardized)","code":""},{"path":"/reference/cronbach.alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cronbach's alpha — cronbach.alpha","text":"","code":"library(DTSEA) library(tibble)  # Load the data data <- tribble(~x, ~y, ~z, 1, 1, 2, 5, 6, 5, 7, 8, 4, 2, 3, 2, 8, 6, 5)  # Run Cronbach's alpha cat(cronbach.alpha(data)) #> 0.9151515"},{"path":"/reference/DTSEA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Drug target set enrichment analysis (DTSEA) — DTSEA-package","title":"The Drug target set enrichment analysis (DTSEA) — DTSEA-package","text":"DTSEA implements novel application GSEA extends adoption GSEA. Drug Target Set Enrichment Analysis (DTSEA) novel tool used identify effective drug set particular disease based Gene Set Enrichment Analysis (GSEA). central hypothesis DTSEA targets potential candidates specific disease (e.g., COVID-19) close , least far away disease. DTSEA algorithm determines whether drug potent chosen disease proximity drug targets disease-related genes. central hypothesis DTSEA, DTSEA consists two main parts: Evaluate influence specific disease PPI network random walk restart algorithm.  evaluate influence, compute disease-node distance using random walk restart (RwR) algorithm, rank nodes reversely. Evaluate drug-disease associations based GSEA.  GSEA approach adopted part identify whether candidate drug targets disease-related (top) disease-unrelated (bottom) human PPI list. specific disease gene list normalized median set zero arbitrary cutoff point classify relations manually. package, provide example data, small set data demonstrate usage main idea behind DTSEA. provide extra data files, real data used DTSEA paper. supplementary package now GitHub. Anyone can obtain package example code.","code":""},{"path":"/reference/DTSEA-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Drug target set enrichment analysis (DTSEA) — DTSEA-package","text":"DTSEA","code":""},{"path":"/reference/DTSEA-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Drug target set enrichment analysis (DTSEA) — DTSEA-package","text":"","code":"# if (!\"devtools\" %in% as.data.frame(installed.packages())$Package) #   install.packages(\"devtools\") # devtools::install_github(\"hanjunwei-lab/DTSEAdata\")"},{"path":"/reference/DTSEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","title":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","text":"DTSEA function determines whether drug potent specific disease proximity targets disease-related genes.","code":""},{"path":"/reference/DTSEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","text":"","code":"DTSEA(   network,   disease,   drugs,   rwr.pt = 0,   sampleSize = 101,   minSize = 1,   maxSize = Inf,   nproc = 0,   eps = 1e-50,   nPermSimple = 5000,   gseaParam = 1,   verbose = TRUE )"},{"path":"/reference/DTSEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","text":"network human protein-protein interactome network. preconverted inputted DTSEA. disease disease-related nodes. drugs drug-target long format dataframe. includes least columns drug_id drug_target. rwr.pt random walk p0 vector. Set 0 wish DTSEA automatically compute , can provide predetermined p0 vector. sampleSize size randomly selected gene collection, size = pathwaySize minSize Minimal set drug set tested. maxSize Maximal set drug set tested. nproc CPU workers fgsea utilize. eps boundary calculating p value. nPermSimple Number permutations simple fgsea implementation preliminary estimation P-values. gseaParam GSEA parameter value, gene-level statistics raised power 'gseaParam' calculating GSEA enrichment scores. verbose Show messages","code":""},{"path":"/reference/DTSEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","text":"resulting dataframe consists drug_id, pval, padj, log2err, ES, NES, size, leadingEdge.","code":""},{"path":"/reference/DTSEA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function of drug target set enrichment analysis (DTSEA) — DTSEA","text":"","code":"library(dplyr) library(DTSEA)  # Load the data data(\"example_disease_list\", package = \"DTSEA\") data(\"example_drug_target_list\", package = \"DTSEA\") data(\"example_ppi\", package = \"DTSEA\")  # Run the DTSEA and sort the result dataframe by normalized enrichment scores # (NES) result <- DTSEA(   network = example_ppi,   disease = example_disease_list,   drugs = example_drug_target_list,   verbose = FALSE ) %>% arrange(desc(NES)) #> Warning: There are ties in the preranked stats (0.81% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results.  # Or you can utilize the multi-core advantages by enable nproc parameters # on non-Windows operating systems. result <- DTSEA(             network = example_ppi,             disease = example_disease_list,             drugs = example_drug_target_list,             nproc = 10, verbose = FALSE ) #> Warning: There are ties in the preranked stats (0.81% of the list). #> The order of those tied genes will be arbitrary, which may produce unexpected results.  # We can extract the significantly NES > 0 drug items. result %>%   filter(NES > 0 & pval < .05) #> # A tibble: 1 × 8 #>   drug_id    pval   padj log2err    ES   NES  size leadingEdge #>   <chr>     <dbl>  <dbl>   <dbl> <dbl> <dbl> <int> <list>      #> 1 DB00112 0.00490 0.0310   0.407 0.729  1.83     9 <chr [4]>   # Or we can draw the enrichment plot of the first predicted drug. fgsea::plotEnrichment(   pathway = example_drug_target_list %>%     filter(drug_id == slice(result, 1)$drug_id) %>%     pull(gene_target),   stats = random.walk(network = example_ppi,                       p0 = calculate_p0(nodes = example_ppi,                                         disease = example_disease_list)                       ) )   # If you have obtained the supplemental data, then you can do random walk # with restart in the real data set  # supp_data <- get_data(c(\"graph\", \"disease_related\", \"example_ppi\")) # result <- DTSEA(network = supp_data[[\"graph\"]], #                disease = supp_data[[\"disease_related\"]], #                drugs = supp_data[[\"drug_targets\"]], #                verbose = FALSE)"},{"path":"/reference/example_disease_list.html","id":null,"dir":"Reference","previous_headings":"","what":"An example vector of disease nodes — example_disease_list","title":"An example vector of disease nodes — example_disease_list","text":"list integrated significantly differentially expressed genes (DEGs) GEO dataset GSE183071 work Feng, Song, Guo, et al.","code":""},{"path":"/reference/example_disease_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example vector of disease nodes — example_disease_list","text":"","code":"example_disease_list"},{"path":"/reference/example_disease_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example vector of disease nodes — example_disease_list","text":"object class character length 63.","code":""},{"path":"/reference/example_disease_list.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An example vector of disease nodes — example_disease_list","text":"Gómez-Carballa , Rivero-Calle , Pardo-Seco J, Gómez-Rial J, Rivero-Velasco C, Rodríguez-Núñez N, Barbeito-Castiñeiras G, Pérez-Freixo H, Cebey-López M, Barral-Arca R, Rodriguez-Tenreiro C, Dacosta-Urbieta , Bello X, Pischedda S, Currás-Tuala MJ, Viz-Lasheras S, Martinón-Torres F, Salas ; GEN-COVID study group. multi-tissue study immune gene expression profiling highlights key role nasal epithelium COVID-19 severity. Environ Res. 2022 Jul;210:112890. doi: 10.1016/j.envres.2022.112890. Epub 2022 Feb 22. PMID: 35202626; PMCID: PMC8861187. Feng S, Song F, Guo W, Tan J, Zhang X, Qiao F, Guo J, Zhang L, Jia X. Potential Genes Associated COVID-19 Comorbidity. Int J Med Sci. 2022 Jan 24;19(2):402-415. doi: 10.7150/ijms.67815. PMID: 35165525; PMCID: PMC8795808.","code":""},{"path":"/reference/example_disease_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example vector of disease nodes — example_disease_list","text":"","code":"library(DTSEA)  data(\"example_disease_list\", package = \"DTSEA\")"},{"path":"/reference/example_drug_target_list.html","id":null,"dir":"Reference","previous_headings":"","what":"An example data frame of drug target lists — example_drug_target_list","title":"An example data frame of drug target lists — example_drug_target_list","text":"Drug-target interactions downloaded integrated DrugBank ChEMBL.","code":""},{"path":"/reference/example_drug_target_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example data frame of drug target lists — example_drug_target_list","text":"","code":"example_drug_target_list"},{"path":"/reference/example_drug_target_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example data frame of drug target lists — example_drug_target_list","text":"data frame 970 rows 3 variables: drug_id: DrugBank ID drug_name: name drug gene_target: targets drugs","code":""},{"path":"/reference/example_drug_target_list.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An example data frame of drug target lists — example_drug_target_list","text":"Wishart DS, Feunang YD, Guo AC, Lo EJ, Marcu , Grant JR, Sajed T, Johnson D, Li C, Sayeeda Z, Assempour N, Iynkkaran , Liu Y, Maciejewski , Gale N, Wilson , Chin L, Cummings R, Le D, Pon , Knox C, Wilson M. DrugBank 5.0: major update DrugBank database 2018. Nucleic Acids Res. 2018 Jan 4;46(D1):D1074-D1082. doi: 10.1093/nar/gkx1037. PMID: 29126136; PMCID: PMC5753335. Gaulton , Hersey , Nowotka M, Bento AP, Chambers J, Mendez D, Mutowo P, Atkinson F, Bellis LJ, Cibrián-Uhalte E, Davies M, Dedman N, Karlsson , Magariños MP, Overington JP, Papadatos G, Smit , Leach AR. ChEMBL database 2017. Nucleic Acids Res. 2017 Jan 4;45(D1):D945-D954. doi: 10.1093/nar/gkw1074. Epub 2016 Nov 28. PMID: 27899562; PMCID: PMC5210557.","code":""},{"path":"/reference/example_drug_target_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example data frame of drug target lists — example_drug_target_list","text":"","code":"library(DTSEA) data(\"example_drug_target_list\", package = \"DTSEA\")"},{"path":"/reference/example_ppi.html","id":null,"dir":"Reference","previous_headings":"","what":"An example human gene functional interaction network object — example_ppi","title":"An example human gene functional interaction network object — example_ppi","text":"extracted gene functional interaction network multiple sources experimental evidence integrated .","code":""},{"path":"/reference/example_ppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example human gene functional interaction network object — example_ppi","text":"","code":"example_ppi"},{"path":"/reference/example_ppi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example human gene functional interaction network object — example_ppi","text":"igraph object","code":""},{"path":"/reference/example_ppi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An example human gene functional interaction network object — example_ppi","text":"Kanehisa M, Furumichi M, Sato Y, Ishiguro-Watanabe M, Tanabe M. KEGG: integrating viruses cellular organisms. Nucleic Acids Res. 2021 Jan 8;49 (D1):D545-D551. doi: 10.1093/nar/gkaa970. PMID: 33125081; PMCID: PMC7779016.","code":""},{"path":"/reference/example_ppi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example human gene functional interaction network object — example_ppi","text":"","code":"library(DTSEA) data(\"example_ppi\", package = \"DTSEA\")"},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extra data — get_data","title":"Get extra data — get_data","text":"Get extra data","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extra data — get_data","text":"","code":"get_data(name)"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extra data — get_data","text":"name Data name","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extra data — get_data","text":"list wanted data","code":""},{"path":"/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get extra data — get_data","text":"","code":"# Do some stuff  data <- get_data(\"ncbi_list\")"},{"path":"/reference/kendall.w.html","id":null,"dir":"Reference","previous_headings":"","what":"Kendall's coefficient of concordance W — kendall.w","title":"Kendall's coefficient of concordance W — kendall.w","text":"Computes Kendall's coefficient concordance.","code":""},{"path":"/reference/kendall.w.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kendall's coefficient of concordance W — kendall.w","text":"","code":"kendall.w(raw, correct = TRUE)"},{"path":"/reference/kendall.w.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kendall's coefficient of concordance W — kendall.w","text":"raw data frame matrix contains n subjects * m raters. correct Logical. Indicates whether W corrected ties within raters.","code":""},{"path":"/reference/kendall.w.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kendall's coefficient of concordance W — kendall.w","text":"resulting list consists title, kendall.w, chisq, df, pval, report.","code":""},{"path":"/reference/kendall.w.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kendall's coefficient of concordance W — kendall.w","text":"","code":"library(DTSEA) library(tibble)  # Load the data data <- tribble(~x, ~y, ~z, 1,1,2,  5,6,5,  7,8,4, 2,3,2, 8,6,5)  # Run Kendall's W print(kendall.w(data)$report) #> [1] \"Kendall's coefficient W = 0.836, p = 0.0792\""},{"path":"/reference/random.walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","title":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","text":"Function random.walk supposed implement original Random Walk Restart (RwR) input graph. seeds (.e.,  set starting nodes) given, intends calculate affinity score nodes graph seeds.","code":""},{"path":"/reference/random.walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","text":"","code":"random.walk(   network,   p0,   edge_weight = FALSE,   gamma = 0.7,   threshold = 1e-10,   pt.post.processing = \"log\",   pt.align = \"median\",   verbose = FALSE )"},{"path":"/reference/random.walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","text":"network input graph object. either igraph object edge list matrix / data frame. p0 starting vector time t0. edge_weight Logical indicate whether input graph contains weight information. gamma restart probability used RwR. gamma takes value 0 1, controlling probability node go back starting node. threshold threshold used RwR. threshold indicates stabilization status, stopping criterion RwR. pt.post.processing way scale pt vector. can 'none', 'zscore', 'log'. pt.align way normalize output pt vector. can mean manually cut - -regulated genes, median avoid influence distribution shape, none normalization. verbose Show progress calculation.","code":""},{"path":"/reference/random.walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","text":"pt vector","code":""},{"path":"/reference/random.walk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to implement Random Walk with Restart (RwR) algorithm on the\r\ninput graph — random.walk","text":"","code":"library(DTSEA)  # Load the data data(\"example_disease_list\", package = \"DTSEA\") data(\"example_drug_target_list\", package = \"DTSEA\") data(\"example_ppi\", package = \"DTSEA\")  # Perform random walk p0 <- calculate_p0(nodes = example_ppi, disease = example_disease_list) pt <- random.walk(network = example_ppi, p0 = p0)  # Perform GSEA analysis # ....  # If you have obtained the supplemental data, then you can do random walk # with restart in the real data set  # supp_data <- get_data(c(\"graph\", \"disease_related\", \"example_ppi\")) # p0 <- calculate_p0(nodes = supp_data[[\"graph\"]], #                    disease = supp_data[[\"disease_related\"]]) # pt <- random.walk(network = supp_data[[\"example_ppi\"]], #                   p0 = p0)"},{"path":"/reference/random_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"A random graph for the computation of the separation measure — random_graph","title":"A random graph for the computation of the separation measure — random_graph","text":"random graph retrieved Menche et al (2015).","code":""},{"path":"/reference/random_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A random graph for the computation of the separation measure — random_graph","text":"","code":"random_graph"},{"path":"/reference/random_graph.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A random graph for the computation of the separation measure — random_graph","text":"igraph object","code":""},{"path":"/reference/random_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A random graph for the computation of the separation measure — random_graph","text":"Menche J, Sharma , Kitsak M, Ghiassian SD, Vidal M, Loscalzo J, Barabási AL. Disease networks. Uncovering disease-disease relationships incomplete interactome. Science. 2015 Feb 20;347(6224):1257601. doi: 10.1126/science.1257601. PMID: 25700523; PMCID: PMC4435741.","code":""},{"path":"/reference/random_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A random graph for the computation of the separation measure — random_graph","text":"","code":"library(DTSEA) data(\"random_graph\", package = \"DTSEA\")"},{"path":"/reference/separation.html","id":null,"dir":"Reference","previous_headings":"","what":"A measure of network separation — separation","title":"A measure of network separation — separation","text":"Calculates separation two sets nodes network. metric calculated Menche et al. (2015).","code":""},{"path":"/reference/separation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A measure of network separation — separation","text":"","code":"separation(graph, set_a, set_b)"},{"path":"/reference/separation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A measure of network separation — separation","text":"graph input graph object. either igraph object edge list matrix/data frame. set_a first gene set set_b second gene set","code":""},{"path":"/reference/separation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A measure of network separation — separation","text":"separation distance measurement specified two modules.","code":""},{"path":"/reference/separation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A measure of network separation — separation","text":"","code":"library(DTSEA)  # Load the data data(\"random_graph\", package = \"DTSEA\")  # Compute the separation metric separation <- separation(   graph = random_graph,   set_a = c(\"4\", \"6\", \"8\", \"13\"),   set_b = c(\"8\", \"9\", \"10\", \"15\", \"18\") ) cat(separation, \"\\n\") #> -0.005555556"},{"path":"/news/index.html","id":"dtsea-003","dir":"Changelog","previous_headings":"","what":"DTSEA 0.0.3","title":"DTSEA 0.0.3","text":"Improved documents updated supplementary data. Introduced multicore computing capability DTSEA.","code":""},{"path":"/news/index.html","id":"dtsea-002","dir":"Changelog","previous_headings":"","what":"DTSEA 0.0.2","title":"DTSEA 0.0.2","text":"CRAN release: 2022-10-18 Added NEWS.md file track changes package.","code":""},{"path":"/news/index.html","id":"dtsea-001","dir":"Changelog","previous_headings":"","what":"DTSEA 0.0.1","title":"DTSEA 0.0.1","text":"CRAN release: 2022-10-12 Initial version","code":""}]
